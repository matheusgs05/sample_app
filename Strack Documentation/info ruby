Infos Ruby


Criação de projeto
rails new "nome_projeto"

Dentro do projeto...

Gemfile é o arquivo onde coloca-se as gems que o projeto irá utilizar, que são "bibliotecas".
Após a ãtualização do gemfile, é necessario rodar o comando bundle install para instalar as gemas, e reiniciar o servidor para utilizar as gemas.

Para criar controllers e models, usa-se o comando rails generate model/controller "nome"

Caso se crie um scaffold, no projeto é automaticamente criado o controller, o model e a view. Também já é criado
automaticamente as operações no banco de dados (CRUD). 

-- Como utilizar o GITHUB

Antes de começar a mexer no projeto, é preciso ver se ninguem fez alguma mudança no repositório.
Para atualizar a sua versão com a versão do repositório, você pode clonar o repositório, ou ir no site github.com e baixar o .zip com o projeto.

Para upar o projeto para o github....
git init
git config --global user.name "Seu nome"
git config --global user.email seuemail
git add . (ou git add -A) (All)
git merge -m "Comentario sobre as mudanças"
git push "link do repositorio"

-- Atualizando o repositório para o HEROKU

heroku login
heroku create
git push heroku master
heroku run rake db:migrate

****IMPORTANTE****

Quando vc passa o server para o heroku, o banco está vazio.
Como vc precisa de pelo menos 1 usuario como administrador para entrar e criar usuarios, você deve rodar um arquivo para gerar usuario.
O arquivo está na seguinte paste: sample_app -> lib -> tasks -> sample_data.rake
Lá deve ser definido quantos usuários desejar.

Para atualizar isso no banco de dados, rode o seguinte comando no cmd
heroku run rake db:populate

O arquivo populate já está criado
Ele cria um grupo, chamado administradores e os seguintes usuarios:

admin = User.create!(name:     "Matheus Gaya Scandiffio",
                       email:    "matheusgs05@hotmail.com",
                       password: "123456",
                       password_confirmation: "123456",
                       idgrupo: 1,
                       admin: true)
admin2 = User.create!(name:     "Tito Rezende",
                       email:    "titobrezende@hotmail.com",
                       password: "123456",
                       password_confirmation: "123456",
                       idgrupo: 1,
                       admin: true)

Caso queira limpar o bando de dados do heroku, rode o seguinte comando no cmd
heroku pg:reset DATABASE


-- Atualização de Modelos

Se apos a criação do modelo for necessário mudar algum campo do banco de dados, ou adicionar algum campo, use o comando:
rails generate migration Add"Campo"To"Tabela" "Campo":"Tipo"
exemplo: rails generate migration AddIdadeToUsuario idade:Integer

Isso irá gerar um migration, então apos executar esse comando, é necessario atualizar o banco, rodando o seguinte comando
bundle exec rake db:migrate

IMPORTANTE!!!
-- Após fazer alguma edição com rails generate migration, é preciso ir no controller da classe, e alterar o def user_params para aceitar o nome campo inserido

-- Cada Controller possui as seguintes ações:

#Possui as 7 "ações da REST"
#Dessas 7, 4 possuem views.
#Cada view possui um codigo .html.erb.
#Acessa o index da pagina ("tela principal")
def index
end

#Usada para listar detalhes de itens ou usuarios.
def show
end

#Usado para receber dados do usuario.
#Quando é submetido, é direcionado para o create
def new
end

#Nao possui view.
#Cria um dado, e redireciona normalmente para o index
def create
end

#Cria o formulario.
#Quando é submetido, é direcionado para o update.
def edit
end

#Nao possui view.
#Atualiza e salva no banco.
def update
end

#Nao possui view.
#Recebe um id, e deleta o objeto.
#Redireciona para outro lugar, geralmente index.
def destroy
end

-- Criando Models

#Models são as classes do ruby.
#Após criar cada model, é criado um arquivo na pasta db.
#Para abrir o servidor, é preciso migrar esse arquivo para o db, usando o comando
#bundle exec rake:db migrate

#Para validar qualquer campo, as alterações são feitas na pasta models da classe.
#Relações entre classes, são feitas também no Models.

-- Views

#Quando é acessado uma das ações no controller, o usuario ve o que tem na view.
#A view é HTML com codigo Ruby.
#Para usar codigo em Ruby, usa a tag <% %>
#Para acessar variavel em Ruby, usa a tag <%= %>
#As variaveis são modificadas no controller, e acessadas na View.
#Para isso, cria-se variavels com o caracter "@" antes.
#Sintaxe para um laço em ruby dentor do arquivo HTML:
	
	<% @variaveis.each do |var| %>
		<%= var.atributo %>
	<% end %>

-- Banco de Dados

#Ao criar um model, na pasta db->migrate é criado um arquivo, que é a tabela criada no banco de dados
#Caso queira mudar algum atributo, só editar aquele arquivo, e migrar o db, com rake db:migrate